name: CI Pipeline

on: [ push, pull_request, workflow_dispatch ]

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    env:
      pathToSolution: Microsoft.Diagnostics.Runtime.sln
      testResultsFolderName: Test results
      publishOutputFolderName: Publish output
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Tooling setup

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.411

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.302

      # Build and test validation

      - name: Restore solution
        shell: pwsh
        run: |
          $pathToSolution = "${{ env.pathToSolution }}"

          dotnet restore $pathToSolution

      - name: Build solution
        shell: pwsh
        run: |
          $pathToSolution = "${{ env.pathToSolution }}"
          $configurationSetting = "Debug"

          dotnet build $pathToSolution `
          --configuration $configurationSetting `
          --no-restore

      - name: Run unit tests
        continue-on-error: true
        shell: pwsh
        run: |
          $pathToSolution = "${{ env.pathToSolution }}"
          $pathToTestTargets = "src/TestTargets/TestTargets.proj"
          $configurationSetting = "Debug"
          $loggerAttributes = "trx;LogFilePath=TestResults.trx;verbosity=normal"
          $testOutputFolder = "${{ env.testResultsFolderName }}"

          dotnet build $pathToTestTargets `
          --configuration $configurationSetting

          dotnet test $pathToSolution `
          --configuration $configurationSetting `
          --logger $loggerAttributes `
          --results-directory $testOutputFolder `
          --no-build

      # Artifact generation

      - name: Publish project for each target framework
        shell: pwsh
        run: |
          $pathToProject = "src/Microsoft.Diagnostics.Runtime/Microsoft.Diagnostics.Runtime.csproj"
          $configurationSetting = "Debug"
          $publishOutputFolder = "${{ env.publishOutputFolderName }}"
          $targetFrameworksProperty = [String](([xml](Get-Content -Path $pathToProject)).Project.PropertyGroup.TargetFrameworks)
          $targetFrameworks = $targetFrameworksProperty.split(';')

          foreach ( $framework in $targetFrameworks ) {
            $frameworkNum = [String]($framework -replace ' ', '')

            dotnet publish $pathToProject `
            --configuration $configurationSetting `
            --output "$publishOutputFolder/$frameworkNum" `
            --framework $frameworkNum `
            --no-restore
          }

      # Artifact publish to pipeline

      - name: Upload test results as pipeline artifact
        uses: actions/upload-artifact@v2
        with:
          name: Test results
          path: ${{ env.testResultsFolderName }}

      - name: Upload publish output as pipeline artifact
        uses: actions/upload-artifact@v2
        with:
          name: Publish output
          path: ${{ env.publishOutputFolderName }}

# Built with ‚ù§ by [Pipeline Foundation](https://pipeline.foundation)